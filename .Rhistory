geom_violin(aes(fill = `Re-positive`))+
geom_boxplot(outlier.shape = NA,fill = 'white',width = 0.2)+
geom_jitter(mapping = aes(fill=`Re-positive`),
width = 0.4,
shape = 21,
size=2,stroke = 0.5)+
stat_compare_means(comparisons = comparisons,
method = 't.test',
label = "p.format",
size =3)+# format
scale_fill_manual(values=value_colour)+
theme_classic()+
# theme(axis.text.x = element_blank(),
#       #axis.text.x=element_text(angle=45,hjust = 1,colour="black",family="Arial",size=16),
#       axis.text.y=element_text(family="Arial",size=10,face="plain",colour="black"),
#       axis.title.y=element_text(family="Arial",size = 10,face="plain"),
#       axis.title.x=element_text(family="Arial",size = 10,face="plain"),
#       axis.title=element_text(family="Arial",size = 10,face="plain"))+
labs(title="S protein",
subtitle = "method: t.test",
x = "Re-positive")
plot_list
plot_list <- ggplot(data_ggplot,aes(x =`Re-positive` ,y = log2(`average-negative`)))+
geom_violin(aes(fill = `Re-positive`))+
geom_boxplot(outlier.shape = NA,fill = 'white',width = 0.2)+
geom_jitter(mapping = aes(fill=`Re-positive`),
width = 0.4,
shape = 21,
size=2,stroke = 0.5)+
stat_compare_means(comparisons = comparisons,
method = 'wilcox.test',
label = "p.format",
size =3)+# format
scale_fill_manual(values=value_colour)+
theme_classic()+
# theme(axis.text.x = element_blank(),
#       #axis.text.x=element_text(angle=45,hjust = 1,colour="black",family="Arial",size=16),
#       axis.text.y=element_text(family="Arial",size=10,face="plain",colour="black"),
#       axis.title.y=element_text(family="Arial",size = 10,face="plain"),
#       axis.title.x=element_text(family="Arial",size = 10,face="plain"),
#       axis.title=element_text(family="Arial",size = 10,face="plain"))+
labs(title="S protein",
subtitle = "method: t.test",
x = "Re-positive")
plot_list
plot_list <- ggplot(data_ggplot,aes(x =`Re-positive` ,y = log2(`average-negative`)))+
geom_violin(aes(fill = `Re-positive`))+
geom_boxplot(outlier.shape = NA,fill = 'white',width = 0.2)+
geom_jitter(mapping = aes(fill=`Re-positive`),
width = 0.4,
shape = 21,
size=2,stroke = 0.5)+
stat_compare_means(comparisons = comparisons,
method = 't.test',
label = "p.format",
size =3)+# format
scale_fill_manual(values=value_colour)+
theme_classic()+
# theme(axis.text.x = element_blank(),
#       #axis.text.x=element_text(angle=45,hjust = 1,colour="black",family="Arial",size=16),
#       axis.text.y=element_text(family="Arial",size=10,face="plain",colour="black"),
#       axis.title.y=element_text(family="Arial",size = 10,face="plain"),
#       axis.title.x=element_text(family="Arial",size = 10,face="plain"),
#       axis.title=element_text(family="Arial",size = 10,face="plain"))+
labs(title="S protein",
subtitle = "method: t.test",
x = "Re-positive",
y = "log2(IgG) S/CO")
plot_list
plot_list <- ggplot(data_ggplot,aes(x =`Re-positive` ,y = log2(`average-negative`)))+
geom_violin(aes(fill = `Re-positive`))+
geom_boxplot(outlier.shape = NA,fill = 'white',width = 0.2)+
geom_jitter(mapping = aes(fill=`Re-positive`),
width = 0.4,
shape = 21,
size=2,stroke = 0.5)+
stat_compare_means(comparisons = comparisons,
method = 't.test',
label = "p.format",
size =3)+# format
scale_fill_manual(values=value_colour)+
theme_classic()+
theme(axis.text.x = element_blank(),
#axis.text.x=element_text(angle=45,hjust = 1,colour="black",family="Arial",size=16),
axis.text.y=element_text(family="Arial",size=10,face="plain",colour="black"),
axis.title.y=element_text(family="Arial",size = 10,face="plain"),
axis.title.x=element_text(family="Arial",size = 10,face="plain"),
axis.title=element_text(family="Arial",size = 10,face="plain"))+
labs(title="S protein",
subtitle = "method: t.test",
x = "",
y = "log2(IgG) S/CO")
plot_list
ggsave(file = "D:/project/test_1_10/Rplot.png",
plot_list,
dpi = 300,
width = 5,
height = 5)
plot_list <- ggplot(data_ggplot,aes(x =`Re-positive` ,y = `average-negative`))+
geom_violin(aes(fill = `Re-positive`))+
geom_boxplot(outlier.shape = NA,fill = 'white',width = 0.2)+
geom_jitter(mapping = aes(fill=`Re-positive`),
width = 0.4,
shape = 21,
size=2,stroke = 0.5)+
stat_compare_means(comparisons = comparisons,
method = 't.test',
label = "p.format",
size =3)+# format
scale_fill_manual(values=value_colour)+
theme_classic()+
theme(axis.text.x = element_blank(),
#axis.text.x=element_text(angle=45,hjust = 1,colour="black",family="Arial",size=16),
axis.text.y=element_text(family="Arial",size=10,face="plain",colour="black"),
axis.title.y=element_text(family="Arial",size = 10,face="plain"),
axis.title.x=element_text(family="Arial",size = 10,face="plain"),
axis.title=element_text(family="Arial",size = 10,face="plain"))+
labs(title="S protein",
subtitle = "method: t.test",
x = "",
y = "IgG level (S/CO)")
plot_list
plot_list <- ggplot(data_ggplot,aes(x =`Re-positive` ,y = `average-negative`))+
geom_violin(aes(fill = `Re-positive`))+
geom_boxplot(outlier.shape = NA,fill = 'white',width = 0.2)+
geom_jitter(mapping = aes(fill=`Re-positive`),
width = 0.4,
shape = 21,
size=2,stroke = 0.5)+
stat_compare_means(comparisons = comparisons,
method = 't.test',
label = "p.format",
size =3)+# format
scale_fill_manual(values=value_colour)+
theme_classic()+
theme(axis.text.x = element_blank(),
#axis.text.x=element_text(angle=45,hjust = 1,colour="black",family="Arial",size=16),
axis.text.y=element_text(size=10,face="plain",colour="black"),
axis.title.y=element_text(size = 10,face="plain"),
axis.title.x=element_text(size = 10,face="plain"),
axis.title=element_text(size = 10,face="plain"))+
labs(title="S protein",
subtitle = "method: t.test",
x = "",
y = "IgG level (S/CO)")
plot_list
ggsave(file = "D:/project/test_1_10/Rplot.png",
plot_list,
dpi = 300,
width = 5,
height = 5)
ggsave(file = "D:/project/test_1_10/Rplot.pdf",
plot_list,
width = 5,
height = 5)
data_ggplot <- read_excel("D:/project/test_1_10/20230110
install.packages("ggpubr")
library(ggplot2)
q()
library(usethis)
usethis::create_package(path = "D:/project/rPackageTest")
library(ggThemeAssist)
install.packages("ggThemeAssist")
library(ggThemeAssist)
BiocManager::install("MOFA2")
library(MOFA2)
BiocManager::install("HDF5Array")
library(MOFA2)
q()
ProVStrans$col[ProVStrans$`Pro_P.ALL/CD3` < 0.05 & ProVStrans$`Pro_logFC_ALL/CD3` > 0.5] <- "sig"
ProVStrans$col[ProVStrans$`Pro_P.ALL/CD3` < 0.05 & ProVStrans$`Pro_logFC_ALL/CD3` < 0] <- "not"
ProVStrans$col[ProVStrans$`Pro_P.ALL/CD3` > 0.05 ] <- "not"
library(readxl)
ProVStrans <- read_excel("D:/project/ProVStrans.xlsx")
View(ProVStrans)
ProVStrans <- as.data.frame(ProVStrans)
colnames(ProVStrans)
#ProVStrans$col[ProVStrans[,Pro_P.ETP/CD3] >= 0.05 | abs(data[,lfc]) < 0] <- "Not"
ProVStrans$col <- NA
ProVStrans$col[ProVStrans$`Pro_P.ALL/CD3` < 0.05 & ProVStrans$`Pro_logFC_ALL/CD3` > 0.5] <- "sig"
ProVStrans$col[ProVStrans$`Pro_P.ALL/CD3` < 0.05 & ProVStrans$`Pro_logFC_ALL/CD3` < 0] <- "not"
ProVStrans$col[ProVStrans$`Pro_P.ALL/CD3` > 0.05 ] <- "not"
ProVStrans$size <- -log10(ProVStrans$`Pro_P.ALL/CD3`)
list_gene <- ProVStrans[order(ProVStrans$`Pro_logFC_ALL/CD3`,decreasing = T),"Gene"][1:5]
data_ggplot2_ALL <- ProVStrans
data_ggplot <- data_ggplot2_ALL
colnames(data_ggplot)
ggplot(data_ggplot,aes(x = `mRNA_logFC.TALLvsCD3`,
y = `Pro_logFC_ALL/CD3`,
color = col,
size = `size`)) +
# scale_color_manual(values = c("not" = "black",# grey80
#                               "sig" = "#E64B35")) +
geom_point(data = data_ggplot[data_ggplot$col == "not",],
color = "grey50",alpha = 0.8) +
geom_point(data = data_ggplot[data_ggplot$col == "sig",],
color = "#be183e") +
geom_point(data = data_ggplot[data_ggplot$Gene == "HSPA5"|data_ggplot$Gene == "PTK7"|data_ggplot$Gene == "CD5"|data_ggplot$Gene == "CD3E",],
color = "black",alpha = 0.8,
stroke = 1) +
scale_y_continuous(sec.axis = sec_axis(~ .))+
scale_x_continuous(sec.axis = sec_axis(~ .))+
scale_size(name = "Pro_logFC_ALL/CD3", range = c(0.5, 4)) +
# scale_size_area(max_size = 5) +
geom_hline(yintercept  = 0,
size = 0.8,linetype = "solid",
show.legend = TRUE) +
geom_vline(xintercept  = 0,
size = 0.8,linetype = "solid",#
remove.packages("Matrix")
install.packages("https://cran.r-project.org/src/contrib/Archive/Matrix/Matrix_1.5-1.tar.gz")
q()
library(Seurat)
library(Matrix)
devtools::install_github("jinworks/CellChat")
BiocManager::install("ComplexHeatmap")
BiocManager::install("BiocGenerics")
BiocManager::install("BiocNeighbors")
devtools::install_github("jinworks/CellChat")
BiocManager::install("presto")
library(presto)
install.packages("presto")
devtools::install_github("immunogenomics/presto")
devtools::install_github("jinworks/CellChat")
library(CellChat)
CellChatDB <- CellChatDB.human
showDatabaseCategory(CellChatDB)
BiocManager::install("mzID")
library(mzID)
## ----startup, results='hide', echo=FALSE, message=FALSE-----------------------
library(mzID)
ps.options(pointsize=12)
## ----parsing, tidy=TRUE-------------------------------------------------------
exampleFiles <- list.files(system.file('D:/project/peptides_1_1_0.mzid.gz', package = 'mzID'),
pattern = '*.mzid', full.names = TRUE)
mzResults <- mzID(exampleFiles[5])
View(exampleFiles)
## ----parsing, tidy=TRUE-------------------------------------------------------
exampleFiles <- list.files(system.file('D:/project/peptides_1_1_0.mzid.gz', package = 'mzID'),
pattern = '*.mzid.gz', full.names = TRUE)
View(exampleFiles)
?mzID
mzResults <- mzID("D:/project/peptides_1_1_0.mzid.gz")
mzResults
View(mzResults)
## ----class_overview, tidy=TRUE------------------------------------------------
showClass('mzID')
## ----flattening, tidy=TRUE----------------------------------------------------
flatResults <- flatten(mzResults)
names(flatResults)
nrow(flatResults)
#The length of an mzID object is the number of PSM's
length(mzResults)
View(flatResults)
write.csv(flatResults,file = "D:/project/flatResults.csv")
## ----inspection, tidy=TRUE----------------------------------------------------
flatResults$length
nchar(flatResults$sequence)
substr(flatResults$sequence, 1, 10)
nrow(flatResults)
colnames(flatResults)
write.csv(flatResults[1:100,],file = "D:/project/flatResults.csv")
mzResults@peptides@modifications
View(mzResults@peptides@peptides)
write.csv(flatResults,file = "D:/project/flatResults.csv")
saveRDS(mzResults,file = "D:/project/mzResults.rda")
#' Title
#'
#' @param data
#' @param data_group
#' @param value_colour
#'
#' @return
#' @export
#'
#' @examples
#' library(QC)
#' QC_boxplot(data,data_group,value_colour)
QC_boxplot <- function(data,data_group,value_colour){
library(ggplot2)
library(tidyr)
source("./R/data_preparation.R")
data_pre <- data_preparation(data,data_group)
data_ggplot <- tidyr::gather(data_pre,key = "key",
value = "value",
-c("sampleid","group")
)
if (length(value_colour) != length(table(data_ggplot$group))){
warning("the length of value_colour is not equal to the length of data_group")
}
if (length(value_colour) < length(table(data_ggplot$group))){
stop("the length of value_colour is less than the length of data_group")
}
data_ggplot <- data_ggplot[order(data_ggplot$group),]
data_ggplot$sampleid <- factor(data_ggplot$sampleid,levels = unique(data_ggplot$sampleid))
data_ggplot <- data_ggplot[order(data_ggplot$sampleid),]
if (!is.factor(data_ggplot$group)) {
data_ggplot$group <- factor(data_ggplot$group)
}
ggplot(data_ggplot,aes(x = sampleid,
y = log2(value + 1),
fill = group)
) +
geom_boxplot() +
scale_fill_manual(values = value_colour) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45,
hjust = 1,
colour = "black",
size = 10),
axis.text.y = element_text(hjust = 1,
colour = "black",
size = 10)
) +
labs(x = "")
}
devtools::document()
QC_PCA <- function(data,data_group,value_colour){
library(FactoMineR)
library(factoextra)
library(tidyr)
source("./R/data_preparation.R")
data_pre <- data_preparation(data,data_group)
group_list <- data_pre$group
dat.pca <- data_pre %>%
subset(.,select = -c(group,sampleid)) %>%
PCA(.,graph = FALSE)
fviz_pca_ind(dat.pca,
geom.ind = c("text","point"), # show points only (nbut not "text")
col.ind = group_list, # color by groups
palette = value_colour,
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
}
QC_boxplot <- function(data,data_group,value_colour){
library(ggplot2)
library(tidyr)
source("./R/data_preparation.R")
data_pre <- data_preparation(data,data_group)
data_ggplot <- tidyr::gather(data_pre,key = "key",
value = "value",
-c("sampleid","group")
)
if (length(value_colour) != length(table(data_ggplot$group))){
warning("the length of value_colour is not equal to the length of data_group")
}
if (length(value_colour) < length(table(data_ggplot$group))){
stop("the length of value_colour is less than the length of data_group")
}
data_ggplot <- data_ggplot[order(data_ggplot$group),]
data_ggplot$sampleid <- factor(data_ggplot$sampleid,levels = unique(data_ggplot$sampleid))
data_ggplot <- data_ggplot[order(data_ggplot$sampleid),]
if (!is.factor(data_ggplot$group)) {
data_ggplot$group <- factor(data_ggplot$group)
}
ggplot(data_ggplot,aes(x = sampleid,
y = log2(value + 1),
fill = group)
) +
geom_boxplot() +
scale_fill_manual(values = value_colour) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45,
hjust = 1,
colour = "black",
size = 10),
axis.text.y = element_text(hjust = 1,
colour = "black",
size = 10)
) +
labs(x = "")
}
QC_heatmap <- function(data,data_group,value_colour){
library(tidyr)
source("./R/data_preparation.R")
data_pre <- data_preparation(data,data_group)
data_heatmap <- data_pre %>%
subset(.,select = (-c(group,sampleid))) %>%
t() %>%
as.data.frame() %>%
{log2((. + 1))}
library(pheatmap)
# annotation_col requirements:
# 1.the annotation_col must be a data frame
# 2.the row names of annotation_col == the column names of data_heatmap
# 3.the column names of annotation_col is the annotation legend name
#
# annotation_colors requirements:
# 1.the annotation_colors must be a list.
# 2.if the group is more than two, you can add by format.
annotation_heatmap <- data_pre %>%
select(group)
annotation_colors <- list(group = value_colour)
pheatmap(data_heatmap,
show_rownames = F,
annotation_col = annotation_heatmap,
annotation_colors = annotation_colors)
}
library(readr)
gene_count_matrix <- read_csv("gene_count_matrix.csv")
gene_count_matrix <- read_csv("D:/code/QC/gene_count_matrix.csv")
View(gene_count_matrix)
data_group <- data.frame(id = colnames(gene_count_matrix)[-1])
View(data_group)
colnames(gene_count_matrix)[-1]
data_group <- data.frame(id = colnames(gene_count_matrix)[-1],
group = c(rep("CsgCHD7-2",3),
rep("CsgCHD7-5",3),
rep("Csgsc",3),
rep("GsgCHD7-2",3),
rep("GsgCHD7-5",3),
rep("Gsgsc",3),
rep("VsgCHD7-2",3),
rep("VsgCHD7-5",3),
rep("Vsgsc",3)))
library(ggsci)
mypal <- pal_npg("nrc", alpha = 0.7)(9)
value_colour <- mypal
names(value_colour) <- unique(data_group$id)
unique(data_group$id)
names(value_colour) <- unique(data_group$group)
value_colour
data <- gene_count_matrix
QC_boxplot(data,data_group,value_colour)
setwd("D:/code/QC/")
QC_boxplot(data,data_group,value_colour)
rownames(data <- data$gene_id) <- data$...1
rownames(data) <- data$gene_id
data <- as.data.frame(data)
rownames(data) <- data$gene_id
data <- data[,-1]
QC_boxplot(data,data_group,value_colour)
data_group
dim(data_group)
dim(data)
data <- iris %>%
rename(group = "Species") %>%
select(-group)
data_group <- iris %>%
rename(group = "Species") %>%
select(group)
View(data)
View(data_group)
data <- read_csv("D:/code/QC/gene_count_matrix.csv")
data <- as.data.frame(data)
rownames(data) <- data$gene_id
data <- data[,-1]
data_group <- data.frame(id = colnames(gene_count_matrix)[-1],
group = c(rep("CsgCHD7-2",3),
rep("CsgCHD7-5",3),
rep("Csgsc",3),
rep("GsgCHD7-2",3),
rep("GsgCHD7-5",3),
rep("Gsgsc",3),
rep("VsgCHD7-2",3),
rep("VsgCHD7-5",3),
rep("Vsgsc",3)))
rownames(data_group) <- data_group$id
QC_boxplot(data,data_group,value_colour)
data <- as.data.frame(t(data))
QC_boxplot(data,data_group,value_colour)
data_group <- data_group[,-1]
QC_boxplot(data,data_group,value_colour)
data_group <- as.data.frame(data_group)
rownames(data_group) <- rownames(data)
QC_boxplot(data,data_group,value_colour)
colnames(data_group) <- "group"
View(data)
data <- read_csv("D:/code/QC/gene_count_matrix.csv")
data <- as.data.frame(data)
rownames(data) <- data$gene_id
data <- data[,-1]
data <- as.data.frame(data)
result_cor <- round(cor(data),2)
View(result_cor)
heatmap(result_cor)
library(pheatmap)
pheatmap(result_cor)
library(corrplot)
corrplot::corrplot(result_cor)
corrplot::corrplot(result_cor,method = "number")
?corrplot
corrplot::corrplot(result_cor,method = "number",tl.cex = 0.5)
corrplot::corrplot(result_cor,method = "number",tl.cex = 0.5,cl.cex = 0.5)
write.csv(result_cor,file = "result_cor.csv")
library(dplyr)
use_mit_license()
use_mit_license()
??use_mit_license
library(use_mit_license())
library(usethis)
use_mit_license()
?fviz_pca_ind
?PCA
?select
?rename
importFrom("grDevices", "colorRampPalette")
??importFrom
use_import_from("grDevices", "colorRampPalette")
utils::globalVariables(c("group", "id", "value", "."))
??theme_classic
requireNamespace(ggplot2)
requireNamespace("ggplot2")
requireNamespace("tidyr")
??scales
library(scales)
usethis::use_testthat()
usethis::use_test()
importFrom(FactoMineR, PCA)
?importFrom
?rescale
