size = 10)
) +
labs(x = "")
}
QC_boxplot(data,data_group)
data_pre <- data_preparation(data,data_group)
merge_data <- data %>%
mutate(sampleid = rownames(data)) %>%
print(rownames(data))
merge_group <- data_group %>%
mutate(sampleid = rownames(data_group)) %>%
rename(group = group)
merge_result <- merge(merge_data,merge_group,by = "sampleid")
rownames(merge_result) <- merge_result$sampleid
source("./R/data_preparation.R")
data_pre <- data_preparation(data,data_group)
data_ggplot <- tidyr::gather(data_pre,key = "key",
value = "value",
-c("sampleid","group")
)
if (length(value_colour) != length(table(data_ggplot$group))){
warning("the length of value_colour is not equal to the length of data_group")
}
if (length(value_colour) < length(table(data_ggplot$group))){
stop("the length of value_colour is less than the length of data_group")
}
data_ggplot <- data_ggplot[order(data_ggplot$group),]
data_ggplot$sampleid <- factor(data_ggplot$sampleid,levels = unique(data_ggplot$sampleid))
data_ggplot <- data_ggplot[order(data_ggplot$sampleid),]
if (!is.factor(data_ggplot$group)) {
data_ggplot$group <- factor(data_ggplot$group)
}
ggplot(data_ggplot,aes(x = sampleid,
y = log2(value + 1),
fill = group)
) +
geom_boxplot() +
scale_fill_manual(values = value_colour) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45,
hjust = 1,
colour = "black",
size = 10),
axis.text.y = element_text(hjust = 1,
colour = "black",
size = 10)
) +
labs(x = "")
View(data_pre)
data_preparation(data,data_group)
tryCatch({
data_pre <- data_preparation(data,data_group)
},finally = {
}
)
?return
norm <- function(x) sqrt(x%*%x)
norm(1:4)
a <- norm(1:4)
data_pre
data_pre <- data_preparation(data,data_group)
data_preparation <- function(data,data_group){
library(tidyr)
library(dplyr)
if (all(row.names(data) != row.names(data_group))) {
stop("the row names in the data must match those in the group")
}
if (dim(data_group)[2] > 1) {
stop("For this function to run properly, there must be only one group column.")
}
if (dim(data_group)[2] == 1) {
if (colnames(data_group) != "group") {
warning("suggest to rename the column name of group to 'group'")
colnames(data_group) <- "group"
}
}
merge_data <- data %>%
mutate(sampleid = rownames(data))
merge_group <- data_group %>%
mutate(sampleid = rownames(data_group)) %>%
rename(group = group)
merge_result <- merge(merge_data,merge_group,by = "sampleid")
rownames(merge_result) <- merge_result$sampleid
return(merge_result)
}
data_pre <- data_preparation(data,data_group)
QC_boxplot <- function(data,data_group){
library(ggplot2)
library(tidyr)
source("./R/data_preparation.R")
data_pre <- data_preparation(data,data_group)
data_ggplot <- tidyr::gather(data_pre,key = "key",
value = "value",
-c("sampleid","group")
)
if (length(value_colour) != length(table(data_ggplot$group))){
warning("the length of value_colour is not equal to the length of data_group")
}
if (length(value_colour) < length(table(data_ggplot$group))){
stop("the length of value_colour is less than the length of data_group")
}
data_ggplot <- data_ggplot[order(data_ggplot$group),]
data_ggplot$sampleid <- factor(data_ggplot$sampleid,levels = unique(data_ggplot$sampleid))
data_ggplot <- data_ggplot[order(data_ggplot$sampleid),]
if (!is.factor(data_ggplot$group)) {
data_ggplot$group <- factor(data_ggplot$group)
}
ggplot(data_ggplot,aes(x = sampleid,
y = log2(value + 1),
fill = group)
) +
geom_boxplot() +
scale_fill_manual(values = value_colour) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45,
hjust = 1,
colour = "black",
size = 10),
axis.text.y = element_text(hjust = 1,
colour = "black",
size = 10)
) +
labs(x = "")
}
QC_boxplot(data,data_group)
QC_heatmap <- function(data,group,value_colour){
library(tidyr)
source("./R/data_preparation.R")
data_pre <- data_preparation(data,data_group)
data_heatmap <- subset(data_pre,
select = -c(group,sampleid)
)
data_heatmap <- as.data.frame(t(data_heatmap)
)
data_heatmap <- log2(data_heatmap + 1)
library(pheatmap)
# annotation_col requirements:
# 1.the annotation_col must be a data frame
# 2.the row names of annotation_col == the column names of data_heatmap
# 3.the column names of annotation_col is the annotation legend name
#
# annotation_colors requirements:
# 1.the annotation_colors must be a list.
# 2.if the group is more than two, you can add by format.
annotation_heatmap <- group
annotation_colors <- list(group = value_colour)
pheatmap(data_heatmap,
show_rownames = F,
annotation_col = annotation_heatmap,
annotation_colors = annotation_colors)
}
QC_heatmap(data,data_group)
QC_boxplot(data,data_group,value_colour)
value_colour
QC_heatmap(data,data_group,value_colour)
QC_boxplot <- function(data,data_group,value_colour){
library(ggplot2)
library(tidyr)
source("./R/data_preparation.R")
data_pre <- data_preparation(data,data_group)
data_ggplot <- tidyr::gather(data_pre,key = "key",
value = "value",
-c("sampleid","group")
)
if (length(value_colour) != length(table(data_ggplot$group))){
warning("the length of value_colour is not equal to the length of data_group")
}
if (length(value_colour) < length(table(data_ggplot$group))){
stop("the length of value_colour is less than the length of data_group")
}
data_ggplot <- data_ggplot[order(data_ggplot$group),]
data_ggplot$sampleid <- factor(data_ggplot$sampleid,levels = unique(data_ggplot$sampleid))
data_ggplot <- data_ggplot[order(data_ggplot$sampleid),]
if (!is.factor(data_ggplot$group)) {
data_ggplot$group <- factor(data_ggplot$group)
}
ggplot(data_ggplot,aes(x = sampleid,
y = log2(value + 1),
fill = group)
) +
geom_boxplot() +
scale_fill_manual(values = value_colour) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45,
hjust = 1,
colour = "black",
size = 10),
axis.text.y = element_text(hjust = 1,
colour = "black",
size = 10)
) +
labs(x = "")
}
QC_boxplot(data,data_group,value_colour)
QC_PCA <- function(data,data_group,value_colour){
library(FactoMineR)
library(factoextra)
library(tidyr)
source("./R/data_preparation.R")
data_pre <- data_preparation(data,data_group)
data_pca <- subset(data_pre,select = -c(group,sampleid))
dat.pca <- PCA(data_pca,
graph = FALSE)
if (!is.na(filename)) {
pdf(file = paste0(filename,"pdf"),
height = 5,
width = 5
)
fviz_pca_ind(dat.pca,
geom.ind = c("text","point"), # show points only (nbut not "text")
col.ind = group_list, # color by groups
palette = value_colour,
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
dev.off()
png(filename = paste0(filename,"png"),
height = 2000,
width = 2000,
res = 300# ppi
)
fviz_pca_ind(dat.pca,
geom.ind = c("text","point"), # show points only (nbut not "text")
col.ind = group_list, # color by groups
palette = value_colour,
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
dev.off()
}
if (is.na(filename)) {
fviz_pca_ind(dat.pca,
geom.ind = c("text","point"), # show points only (nbut not "text")
col.ind = group_list, # color by groups
palette = value_colour,
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
}
}
QC_PCA(data,data_group,value_colour)
QC_PCA <- function(data,data_group,value_colour){
library(FactoMineR)
library(factoextra)
library(tidyr)
source("./R/data_preparation.R")
data_pre <- data_preparation(data,data_group)
data_pca <- subset(data_pre,select = -c(group,sampleid))
dat.pca <- PCA(data_pca,
graph = FALSE)
fviz_pca_ind(dat.pca,
geom.ind = c("text","point"), # show points only (nbut not "text")
col.ind = group_list, # color by groups
palette = value_colour,
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
}
QC_PCA(data,data_group,value_colour)
QC_PCA <- function(data,data_group,value_colour){
library(FactoMineR)
library(factoextra)
library(tidyr)
source("./R/data_preparation.R")
data_pre <- data_preparation(data,data_group)
group_list <- data_pre$group
data_pca <- subset(data_pre,select = -c(group,sampleid))
dat.pca <- PCA(data_pca,
graph = FALSE)
fviz_pca_ind(dat.pca,
geom.ind = c("text","point"), # show points only (nbut not "text")
col.ind = group_list, # color by groups
palette = value_colour,
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
}
QC_PCA(data,data_group,value_colour)
data_pca <- data_pre %>%
select(-c(group,sampleid))
dat.pca <- data %>%
subset(.,select = -c(group,sampleid)) %>%
PCA(.,graph = FALSE)
dat.pca <- data_pre %>%
subset(.,select = -c(group,sampleid)) %>%
PCA(.,graph = FALSE)
fviz_pca_ind(dat.pca,
geom.ind = c("text","point"), # show points only (nbut not "text")
col.ind = group_list, # color by groups
palette = value_colour,
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
QC_PCA <- function(data,data_group,value_colour){
library(FactoMineR)
library(factoextra)
library(tidyr)
source("./R/data_preparation.R")
data_pre <- data_preparation(data,data_group)
group_list <- data_pre$group
dat.pca <- data_pre %>%
subset(.,select = -c(group,sampleid)) %>%
PCA(.,graph = FALSE)
fviz_pca_ind(dat.pca,
geom.ind = c("text","point"), # show points only (nbut not "text")
col.ind = group_list, # color by groups
palette = value_colour,
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
}
QC_PCA(data,data_group,value_colour)
QC_heatmap <- function(data,group,value_colour){
library(tidyr)
source("./R/data_preparation.R")
data_pre <- data_preparation(data,data_group)
data_heatmap <- data_pre %>%
subset(.,select = (-c(group,sampleid))) %>%
t() %>%
as.data.frame() %>%
{log2((. + 1))}
library(pheatmap)
# annotation_col requirements:
# 1.the annotation_col must be a data frame
# 2.the row names of annotation_col == the column names of data_heatmap
# 3.the column names of annotation_col is the annotation legend name
#
# annotation_colors requirements:
# 1.the annotation_colors must be a list.
# 2.if the group is more than two, you can add by format.
annotation_heatmap <- group
annotation_colors <- list(group = value_colour)
pheatmap(data_heatmap,
show_rownames = F,
annotation_col = annotation_heatmap,
annotation_colors = annotation_colors)
}
QC_heatmap(data,data_group,value_colour)
# data clean requirement:
# 1.Add the group column for each sample.
# 2.The column names of data are the samples.
# 3.The row names of data are the symbols, sampleid and group.
# data iris
data("iris")
data <- iris %>%
rename(group = "Species") %>%
mutate(sampleid = rownames(iris))
data_group <- data %>%
select(group,sampleid)
data <- data %>% select(-group,-sampleid)
QC_heatmap(data,data_group,value_colour)
QC_boxplot <- function(data,data_group,value_colour){
library(ggplot2)
library(tidyr)
source("./R/data_preparation.R")
data_pre <- data_preparation(data,data_group)
data_ggplot <- tidyr::gather(data_pre,key = "key",
value = "value",
-c("sampleid","group")
)
if (length(value_colour) != length(table(data_ggplot$group))){
warning("the length of value_colour is not equal to the length of data_group")
}
if (length(value_colour) < length(table(data_ggplot$group))){
stop("the length of value_colour is less than the length of data_group")
}
data_ggplot <- data_ggplot[order(data_ggplot$group),]
data_ggplot$sampleid <- factor(data_ggplot$sampleid,levels = unique(data_ggplot$sampleid))
data_ggplot <- data_ggplot[order(data_ggplot$sampleid),]
if (!is.factor(data_ggplot$group)) {
data_ggplot$group <- factor(data_ggplot$group)
}
ggplot(data_ggplot,aes(x = sampleid,
y = log2(value + 1),
fill = group)
) +
geom_boxplot() +
scale_fill_manual(values = value_colour) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45,
hjust = 1,
colour = "black",
size = 10),
axis.text.y = element_text(hjust = 1,
colour = "black",
size = 10)
) +
labs(x = "")
}
QC_heatmap <- function(data,data_group,value_colour){
library(tidyr)
source("./R/data_preparation.R")
data_pre <- data_preparation(data,data_group)
data_heatmap <- data_pre %>%
subset(.,select = (-c(group,sampleid))) %>%
t() %>%
as.data.frame() %>%
{log2((. + 1))}
library(pheatmap)
# annotation_col requirements:
# 1.the annotation_col must be a data frame
# 2.the row names of annotation_col == the column names of data_heatmap
# 3.the column names of annotation_col is the annotation legend name
#
# annotation_colors requirements:
# 1.the annotation_colors must be a list.
# 2.if the group is more than two, you can add by format.
annotation_heatmap <- data_group
annotation_colors <- list(group = value_colour)
pheatmap(data_heatmap,
show_rownames = F,
annotation_col = annotation_heatmap,
annotation_colors = annotation_colors)
}
QC_PCA <- function(data,data_group,value_colour){
library(FactoMineR)
library(factoextra)
library(tidyr)
source("./R/data_preparation.R")
data_pre <- data_preparation(data,data_group)
group_list <- data_pre$group
dat.pca <- data_pre %>%
subset(.,select = -c(group,sampleid)) %>%
PCA(.,graph = FALSE)
fviz_pca_ind(dat.pca,
geom.ind = c("text","point"), # show points only (nbut not "text")
col.ind = group_list, # color by groups
palette = value_colour,
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
}
QC_heatmap(data,data_group,value_colour)
View(data_group)
data_group <- data %>%
select(group)
View(data_group)
data_group <- data_group[,-2]
data_group <- as.data.frame(data_group)
QC_heatmap(data,data_group,value_colour)
# 1.2 color setting -------------------------------------------------------
# The names(value_colour) need to be the same as table(data$group)
# If you have more than two groups,
# you can change the "group name" to your group name.
value_colour <- c("setosa" = "#00A087FF",# control group
"versicolor" = "#E64B35FF",# Experimental group
"virginica" = "#4DBBD5FF",# other group1
"other group2" = "#3C5488FF")# other group2
QC_heatmap(data,data_group,value_colour)
View(data_preparation)
data_pre <- data_preparation(data,data_group)
View(data_pre)
QC_heatmap <- function(data,data_group,value_colour){
library(tidyr)
source("./R/data_preparation.R")
data_pre <- data_preparation(data,data_group)
data_heatmap <- data_pre %>%
subset(.,select = (-c(group,sampleid))) %>%
t() %>%
as.data.frame() %>%
{log2((. + 1))}
library(pheatmap)
# annotation_col requirements:
# 1.the annotation_col must be a data frame
# 2.the row names of annotation_col == the column names of data_heatmap
# 3.the column names of annotation_col is the annotation legend name
#
# annotation_colors requirements:
# 1.the annotation_colors must be a list.
# 2.if the group is more than two, you can add by format.
annotation_heatmap <- data_pre %>%
select(group)
annotation_colors <- list(group = value_colour)
pheatmap(data_heatmap,
show_rownames = F,
annotation_col = annotation_heatmap,
annotation_colors = annotation_colors)
}
QC_heatmap(data,data_group,value_colour)
QC_PCA(data,data_group,value_colour)
QC_boxplot(data,data_group,value_colour)
renv::snapshot()
renv::snapshot()
renv::snapshot()
renv::update()
renv::snapshot()
renv::history()
renv::snapshot()
renv::snapshot()
install.packages("clipr")
renv::snapshot()
devtools::document()
install.packages("usethis")
renv::snapshot()
devtools::document()
renv::status()
renv::status()
renv::snapshot()
renv
renv::status()
renv::snapshot()
renv::update()
renv::snapshot()
renv::snapshot()
library(stringr)
text <- "The quick brown fox jumps over the lazy dog"
# 查找字符串中的子串
str_detect(text, "fox")
# 提取字符串中的数字
str_extract(text, "\\d+")
# 替换字符串中的子串
str_replace(text, "fox", "cat")
